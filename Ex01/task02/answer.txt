Judging by the output of the printf statements, each element of the array gets
allocated 4 bytes of memory (because the elements are integers) and the memory
is allocated in a continuous manner (as if it would have been a 1-dimensional
array of 24 elements).

printf output:
address of cube1[0][0][0] = 0x7fff6ee03990
address of cube1[0][0][1] = 0x7fff6ee03994
address of cube1[0][0][2] = 0x7fff6ee03998
address of cube1[0][0][3] = 0x7fff6ee0399c
address of cube1[0][1][0] = 0x7fff6ee039a0
address of cube1[0][1][1] = 0x7fff6ee039a4
address of cube1[0][1][2] = 0x7fff6ee039a8
address of cube1[0][1][3] = 0x7fff6ee039ac
address of cube1[1][0][0] = 0x7fff6ee039b0
address of cube1[1][0][1] = 0x7fff6ee039b4
address of cube1[1][0][2] = 0x7fff6ee039b8
address of cube1[1][0][3] = 0x7fff6ee039bc
address of cube1[1][1][0] = 0x7fff6ee039c0
address of cube1[1][1][1] = 0x7fff6ee039c4
address of cube1[1][1][2] = 0x7fff6ee039c8
address of cube1[1][1][3] = 0x7fff6ee039cc
address of cube1[2][0][0] = 0x7fff6ee039d0
address of cube1[2][0][1] = 0x7fff6ee039d4
address of cube1[2][0][2] = 0x7fff6ee039d8
address of cube1[2][0][3] = 0x7fff6ee039dc
address of cube1[2][1][0] = 0x7fff6ee039e0
address of cube1[2][1][1] = 0x7fff6ee039e4
address of cube1[2][1][2] = 0x7fff6ee039e8
address of cube1[2][1][3] = 0x7fff6ee039ec
